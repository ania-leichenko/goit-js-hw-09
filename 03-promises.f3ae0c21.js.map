{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAIA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAGpCJ,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MAbMO,SAASC,cAAc,SAiC/BC,iBAAiB,UAhBtB,SAAkBC,GAChBA,EAAEC,iBACF,MAAMC,OAAEA,EAAQZ,MAAAa,EAAKC,KAAEA,GAASJ,EAAEK,OAElC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOK,MAAOD,IAAK,CAErClB,EAAckB,EADKE,OAAOL,EAAMI,OAASC,OAAOJ,EAAKG,OAASD,GAE3DG,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAAwB,OAAOC,QAAQ,uBAAqBtB,QAAiBC,UAEtDsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBJ,EAAAwB,OAAOG,QAAQ,sBAAoBxB,QAAeC","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onsubmit(e) {\n  e.preventDefault();\n  const { amount, delay, step } = e.target;\n\n  for (let i = 1; i < amount.value; i++) {\n    let promiseDelay = Number(delay.value) + Number(step.value) * i;\n    createPromise(i, promiseDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n};\n\nform.addEventListener('submit', onsubmit);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","e","preventDefault","amount","delay1","step","target","i","value","Number","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.f3ae0c21.js.map"}